// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                        String       @id @default(uuid())
  username                  String       @unique
  email                     String       @unique
  firstName                 String
  lastName                  String
  image                     String?      @db.VarChar(255)
  password                  String
  phoneNumber               String?
  birthday                  String?
  sex                       String?
  role                      String       @default("user")
  accountType               String?
  verificationCode          String?
  isVerified                Boolean      @default(false)
  verificationCodeExpiresAt DateTime?
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  address                   Address[]
  savedPosts                SavedPosts[]
  follower                  Followers[]
  following                 Followings[]
  posts                     Posts[]
}

model Otp {
  id         String  @id @default(uuid())
  email      String? @unique
  username   String  @unique
  otp        String
  isVerified Boolean @default(false)
  userid     String?
}

model Address {
  id      String  @id @default(uuid())
  region  String
  city    String
  street  String?
  user    Users?  @relation(fields: [usersId], references: [id])
  usersId String? @unique
}

model SavedPosts {
  id      String   @id @default(uuid())
  Users   Users?   @relation(fields: [usersId], references: [id])
  usersId String?
  Posts   Posts?   @relation(fields: [postsId], references: [id])
  postsId String?
  savedAt DateTime @default(now())
}

model Followers {
  id          String   @id @default(uuid())
  Users       Users?   @relation(fields: [usersId], references: [id])
  usersId     String?
  followingAt DateTime @default(now())
}

model Followings {
  id       String   @id @default(uuid())
  Users    Users?   @relation(fields: [usersId], references: [id])
  usersId  String?
  followAt DateTime @default(now())
}

model Posts {
  id                  String             @id @default(uuid())
  propertyTitle       String             @db.VarChar(255)
  propertyDescription String
  propertyType        String
  postType            String             @default("product")
  propertyRegion      String
  propertyCity        String
  propertyStreet      String?
  maxLeaseLengthValue Int?
  maxLeaseLengthType  String?
  minLeaseLengthValue Int?
  minLeaseLengthType  String?
  propertyLeaseTerm   String?
  author              Users?             @relation(fields: [authorId], references: [id])
  authorId            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  postExpiration      DateTime?
  isAvailable         Boolean            @default(true)
  propertyQuantity    Int?
  propertyContact     propertyContacts[]
  propertyPrice       propertyPrices[]
  savedBy             SavedPosts[]
  propertyImages      PostImages[]
}

model propertyContacts {
  id      String  @id @default(uuid())
  type    String?
  value   String?
  Posts   Posts?  @relation(fields: [postsId], references: [id])
  postsId String?
}

model propertyPrices {
  id        String  @id @default(uuid())
  price     Decimal
  priceType String
  Posts     Posts?  @relation(fields: [postsId], references: [id])
  postsId   String?
}

model PostImages {
  id      String  @id @default(uuid())
  image   String  @db.VarChar(255)
  Posts   Posts?  @relation(fields: [postsId], references: [id])
  postsId String?
}
